version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: r3cicle_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: r3cicle
      POSTGRES_USER: r3cicle_user
      POSTGRES_PASSWORD: r3cicle_password_2024
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - r3cicle_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U r3cicle_user -d r3cicle"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: r3cicle_api
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://r3cicle_user:r3cicle_password_2024@database:5432/r3cicle?sslmode=disable
      FRONTEND_URL: http://localhost:3000
      JWT_SECRET: r3cicle_jwt_super_secret_2024
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "5000:5000"
    networks:
      - r3cicle_network
    volumes:
      - ./backend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: r3cicle_web
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      REACT_APP_BASE_URL: http://localhost:3000
    ports:
      - "3000:80"
    networks:
      - r3cicle_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Opcional)
  nginx:
    image: nginx:alpine
    container_name: r3cicle_proxy
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - r3cicle_network

volumes:
  postgres_data:
    driver: local

networks:
  r3cicle_network:
    driver: bridge